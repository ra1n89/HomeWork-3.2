
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
 /*

pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;


contract HomeWork_2 {
 

 int8 public key = 0;
 int8 public countOpenTasks = 0;
 

 struct  Task {
        string taskName;
        uint32  timestamp;
        bool  mark;
    }

Task task;

mapping (int8=>Task) public tasksArray;


// Modifier that allows to accept some external messages
modifier checkOwnerAndAccept {
	// Check that message was signed with contracts key.
		
	require(msg.pubkey() == tvm.pubkey(), 102);
			tvm.accept();
		_;
	} 

function setTask(string name, bool mark) public  checkOwnerAndAccept {
    key += 1;
    task.taskName = name;
    task.timestamp = now;
    task.mark = mark;
    tasksArray[key] = task;

//count opened tasks
    if (task.mark==true){
        countOpenTasks +=1;
        }
}

//check task as done
function setTaskAsDone(int8 taskKeyWhichIsDone) public checkOwnerAndAccept{ 

    tasksArray[taskKeyWhichIsDone].mark = false;
    
    
    countOpenTasks -=1;
}

/
function getTask(int8 keyOfTaks) public view returns (Task){
    
    return tasksArray[keyOfTaks];
}

// removing task
function removeTask(int8 taskKeyToRemove) public checkOwnerAndAccept{ 
    if (tasksArray[taskKeyToRemove].mark==true){
        countOpenTasks -=1;
        }

    delete tasksArray[taskKeyToRemove];
}

    constructor() public {
        // Check that contract's public key is set
        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and
        // message is signed with the owner's private key
        require(msg.pubkey() == tvm.pubkey(), 102);
        // The current smart contract agrees to buy some gas to finish the
        // current transaction. This actions required to process external
        // messages, which bring no value (henceno gas) with themselves.
        tvm.accept();

    }
	}
